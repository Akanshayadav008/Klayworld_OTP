import React, { useState, useEffect } from "react";
import "./style.css";
import Header from "./Header";
import { db } from "../../firebaseConfig";
import { collection, getDocs } from "firebase/firestore";
import { useLocation } from "react-router-dom";

const Search = () => {
  const location = useLocation();
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedCategories, setSelectedCategories] = useState([]);
  const [selectedFinish, setSelectedFinish] = useState("");
  const [selectedSize, setSelectedSize] = useState("");
  const [searchText, setSearchText] = useState("");
  const [loading, setLoading] = useState(false);
  const productsPerPage = 6;
  const collectionName = "products";

  const getParams = () => {
    const params = new URLSearchParams(location.search);
    const categoryParam = params.get("category")?.toLowerCase().trim();
    const finishParam = params.get("finish")?.toLowerCase().trim();
    return { categoryParam, finishParam };
  };

  useEffect(() => {
    const { categoryParam, finishParam } = getParams();
    if (categoryParam) setSelectedCategories([categoryParam]);
    if (finishParam) setSelectedFinish(finishParam);
  }, [location.search]);

  useEffect(() => {
    const fetchAllProducts = async () => {
      setLoading(true);
      try {
        const querySnapshot = await getDocs(collection(db, collectionName));
        const prods = querySnapshot.docs.map((doc) => {
          const data = doc.data();
          return {
            ...data,
            category: Array.isArray(data.category)
              ? data.category.map((c) => c.toLowerCase().trim())
              : [data.category?.toLowerCase().trim()],
            finish: Array.isArray(data.finish)
              ? data.finish.map((f) => f.toLowerCase().trim())
              : [data.finish?.toLowerCase().trim()],
            size: Array.isArray(data.size)
              ? data.size.map((s) => s.toLowerCase().trim())
              : [data.size?.toLowerCase().trim()],
          };
        });
        setProducts(prods);
        setLoading(false);
      } catch (error) {
        console.error("❌ Error fetching products:", error);
        setLoading(false);
      }
    };
    fetchAllProducts();
  }, []);

  useEffect(() => {
    if (products.length > 0) filterProducts();
  }, [products, selectedCategories, selectedFinish, selectedSize]);

  const filterProducts = () => {
    setLoading(true);
    let filteredResults = [...products];

    if (searchText.trim() !== "") {
      filteredResults = filteredResults.filter((product) =>
        product.name?.toLowerCase().includes(searchText.toLowerCase())
      );
    }

    if (selectedCategories.length > 0) {
      filteredResults = filteredResults.filter((product) =>
        selectedCategories.some((cat) => product.category.includes(cat))
      );
    }

    if (selectedFinish) {
      filteredResults = filteredResults.filter((product) =>
        product.finish.includes(selectedFinish)
      );
    }

    if (selectedSize) {
      filteredResults = filteredResults.filter((product) =>
        product.size.includes(selectedSize)
      );
    }

    setFilteredProducts(filteredResults);
    setCurrentPage(1);
    setLoading(false);
  };

  const categoryOptions = [...new Set(products.flatMap((p) => p.category))];
  const finishOptions = [...new Set(products.flatMap((p) => p.finish))];
  const sizeOptions = [...new Set(products.flatMap((p) => p.size))];

  return (
    <div>
      <Header />
      <div className="containerbox">
        <div className="searchinputBox">
          <div className="InputHeader">Text Analysis Tool</div>
          <div style={{ fontSize: "16px", fontFamily: "Poppins" }}>
            Find Your Perfect Tile!
          </div>
          <div id="searchBar">
            <input
              type="text"
              id="searchInput"
              placeholder="Search for products..."
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
            />
            <button className="searchbutton" onClick={filterProducts}>
              Search
            </button>
          </div>

          <div className="dropdowns" id="categoryFilterContainer">
            <select
              value={selectedCategories[0] || ""}
              onChange={(e) => setSelectedCategories([e.target.value])}
            >
              <option value="">All Categories</option>
              {categoryOptions.map((cat) => (
                <option key={cat} value={cat}>
                  {cat}
                </option>
              ))}
            </select>
<br></br>
<br></br>
            <select
              value={selectedFinish || ""}
              onChange={(e) => setSelectedFinish(e.target.value)}
            >
              <option value="">All Finishes</option>
              {finishOptions.map((finish) => (
                <option key={finish} value={finish}>
                  {finish}
                </option>
              ))}
            </select>
<br></br>
<br></br>
           {/* <select
              value={selectedSize || ""}
              onChange={(e) => setSelectedSize(e.target.value)}
            >
              <option value="">All Sizes</option>
              {sizeOptions.map((size) => (
                <option key={size} value={size}>
                  {size}
                </option>
              ))}
            </select>
            */}
          </div>
        </div>

        <div className="resultbox" style={{ display: "flex", flexDirection: "column", minHeight: "480px" }}>
          <h2>Search Results</h2>
          {loading ? (
            <p>Loading...</p>
          ) : (
            <>
              <p>Total Products: {filteredProducts.length}</p>
              {filteredProducts.length === 0 ? (
                <p>No results found.</p>
              ) : (
                <div id="productGrid">
                  {filteredProducts
                    .slice((currentPage - 1) * productsPerPage, currentPage * productsPerPage)
                    .map((product) => (
                      <div key={product.product_id} className="product-card" data-product-id={product.product_id}>
                        <div className="image-container">
                          <div className="spinner"></div>
                          <img
                            src={product.tileImage ? `http://147.93.28.17:3000/convertToWebP?url=${encodeURIComponent(product.tileImage)}` : ""}
                            alt={product.name}
                            loading="lazy"
                            className="product-image"
                            onLoad={(e) => {
                              e.target.style.opacity = "1";
                              if (e.target.previousSibling) e.target.previousSibling.remove();
                            }}
                            onClick={() => (window.location.href = `product-details?id=${product.product_id}`)}
                          />
                        </div>
                        <strong className="product-name" onClick={() => (window.location.href = `product-details?id=${product.product_id}`)}>
                          {product.name || "N/A"}
                        </strong>
                        <p>Finish: {product.finish.join(", ")}</p>
                        <p>Category: {product.category.join(", ")}</p>
                        <p>Size: {product.size.join(", ")}</p>
                      </div>
                    ))}
                </div>
              )}
            </>
          )}

          {filteredProducts.length > productsPerPage && (
            <div className="pagination" style={{ marginTop: "auto", paddingTop: "10px" }}>
              <button onClick={() => currentPage > 1 && setCurrentPage(currentPage - 1)} disabled={currentPage === 1}>
                Previous
              </button>
              <button
                onClick={() => currentPage * productsPerPage < filteredProducts.length && setCurrentPage(currentPage + 1)}
                disabled={currentPage * productsPerPage >= filteredProducts.length}
              >
                Next
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Search;
